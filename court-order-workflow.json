{
  "name": "My workflow 9",
  "nodes": [
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json; charset=utf-8"
              }
            ]
          }
        }
      },
      "id": "d510217b-ef28-461f-b315-8269aea9359c",
      "name": "Send Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [2112, -64]
    },
    {
      "parameters": {
        "jsCode": "// Create final response with all calendar links\nconst items = $input.all();\n\nconsole.log('Processing', items.length, 'items from aggregate node');\nconsole.log('Sample item structure:', JSON.stringify(items[0]?.json, null, 2));\n\n// Extract events from aggregated data\nlet eventsData = [];\nif (items.length > 0 && items[0].json.events) {\n  // Events are aggregated in the 'events' field\n  eventsData = items[0].json.events;\n} else {\n  // Fallback: treat each item as an individual event\n  eventsData = items.map(item => item.json);\n}\n\nconsole.log('Found', eventsData.length, 'events to process');\n\n// Extract event info with calendar links\nconst events = eventsData.map((data, index) => {\n  \n  console.log(`Processing event ${index + 1}:`, {\n    id: data.id,\n    summary: data.summary,\n    htmlLink: data.htmlLink,\n    start: data.start,\n    description: data.description\n  });\n  \n  // Get calendar link from Google Calendar response\n  let calendarLink = data.htmlLink || null;\n  \n  // If no htmlLink, try to construct from event ID\n  if (!calendarLink && data.id) {\n    calendarLink = `https://calendar.google.com/calendar/event?eid=${data.id}`;\n  }\n  \n  // Extract deadline date - improved logic\n  let deadline = 'Unknown Date';\n  if (data.start?.dateTime) {\n    deadline = data.start.dateTime.split('T')[0];\n  } else if (data.start?.date) {\n    deadline = data.start.date;\n  } else if (data.deadline) {\n    deadline = data.deadline;\n  }\n  \n  // Get event title - improved extraction\n  let title = data.summary || 'Untitled Event';\n  \n  // Get action from description or direct field - improved extraction\n  let action = 'Action not specified';\n  if (data.action) {\n    action = data.action;\n  } else if (data.description) {\n    const descMatch = data.description.match(/Action Required: (.+?)(?:\\n|$)/);\n    if (descMatch) {\n      action = descMatch[1].trim();\n    } else {\n      // Try to extract from title if it contains [Court Order]\n      const titleMatch = title.match(/\\[Court Order\\] (.+)/);\n      if (titleMatch) {\n        action = titleMatch[1].trim();\n      }\n    }\n  }\n  \n  // Get responsible party - improved extraction\n  let responsible = 'Not specified';\n  if (data.responsible) {\n    responsible = data.responsible;\n  } else if (data.description) {\n    const respMatch = data.description.match(/Responsible Party: (.+?)(?:\\n|$)/);\n    if (respMatch) {\n      responsible = respMatch[1].trim();\n    }\n  }\n  \n  console.log(`Event ${index + 1} processed:`, {\n    title,\n    action,\n    deadline,\n    responsible,\n    calendarLink\n  });\n  \n  return {\n    eventNumber: index + 1,\n    title: title,\n    action: action,\n    deadline: deadline,\n    responsible: responsible,\n    calendarEventId: data.id || 'unknown',\n    calendarLink: calendarLink,\n    calendarLinkHtml: calendarLink ? `<a href=\"${calendarLink}\" target=\"_blank\">Open Event</a>` : 'No Link',\n    status: data.status || 'confirmed'\n  };\n});\n\n// Sort by deadline\nevents.sort((a, b) => {\n  if (a.deadline === 'Unknown Date') return 1;\n  if (b.deadline === 'Unknown Date') return -1;\n  return new Date(a.deadline) - new Date(b.deadline);\n});\n\n// Calculate statistics\nconst byResponsible = events.reduce((acc, event) => {\n  const party = event.responsible;\n  acc[party] = (acc[party] || 0) + 1;\n  return acc;\n}, {});\n\n// Format date range\nlet dateRangeText = 'No dates';\nif (events.length > 0) {\n  const firstDate = events[0]?.deadline;\n  const lastDate = events[events.length - 1]?.deadline;\n  if (firstDate && lastDate && firstDate !== 'Unknown Date' && lastDate !== 'Unknown Date') {\n    if (firstDate === lastDate) {\n      dateRangeText = firstDate;\n    } else {\n      dateRangeText = `${firstDate} to ${lastDate}`;\n    }\n  }\n}\n\nconst response = {\n  success: true,\n  message: `‚úÖ Successfully created ${events.length} calendar event(s)`,\n  \n  summary: {\n    totalEvents: events.length,\n    eventsWithLinks: events.filter(e => e.calendarLink).length,\n    byResponsibleParty: byResponsible,\n    dateRange: dateRangeText,\n    caseInfo: {\n      caseNumber: \"DCPI 2999/2024\",\n      caseName: \"CHAN WING HONG v DELICIOUS KINGDOM CATERING SERVICE LIMITED\"\n    }\n  },\n  \n  events: events,\n  \n  quickLinks: {\n    viewAllEvents: `https://calendar.google.com/calendar/u/0/r`,\n    viewThisMonth: `https://calendar.google.com/calendar/u/0/r/month/${events[0]?.deadline?.substring(0,7).replace('-', '/') || '2025/01'}`\n  },\n  \n  instructions: [\n    \"üìÖ Click 'calendarLink' in each event to view/edit in Google Calendar\",\n    \"üîî Events are scheduled for 9:00 AM - 10:00 AM on deadline date\",\n    \"‚úèÔ∏è Modify event time directly in Google Calendar if needed\",\n    \"üîó Use 'quickLinks' to view your full calendar\"\n  ],\n  \n  timestamp: new Date().toISOString()\n};\n\nconsole.log('Response ready:');\nconsole.log('- Total events:', response.summary.totalEvents);\nconsole.log('- Events with links:', response.summary.eventsWithLinks);\nconsole.log('- Date range:', response.summary.dateRange);\n\nreturn { json: response };"
      },
      "id": "76e2357e-de54-496a-9674-7da283e15eeb",
      "name": "Prepare Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1888, -64]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "events",
        "options": {}
      },
      "id": "653caad8-a98d-4315-b2dc-40e27cda4d41",
      "name": "Aggregate All Events",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [1664, -64]
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "thanhnha6f@gmail.com",
          "mode": "list",
          "cachedResultName": "thanhnha6f@gmail.com"
        },
        "start": "={{ $json.startDateTime }}",
        "end": "={{ $json.endDateTime }}",
        "additionalFields": {
          "description": "={{ $json.description }}",
          "sendUpdates": "none",
          "summary": "={{ $json.summary }}"
        }
      },
      "id": "625026a4-b2c3-4f11-bf50-c9194cd4b6d9",
      "name": "Create Google Calendar Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [1456, -64],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "hvJFtaFkzQaSdnWp",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// L·∫•y item hi·ªán t·∫°i - n8n t·ª± ƒë·ªông ch·∫°y cho t·ª´ng item\nconst deadline = $input.item.json;\n\nconsole.log('=== PROCESSING ITEM ===');\nconsole.log('Action:', deadline.action);\nconsole.log('Deadline:', deadline.deadline);\n\n// T·∫°o event title\nconst eventTitle = `[Court Order] ${deadline.action}`;\n\n// T·∫°o description chi ti·∫øt\nconst eventDescription = `Court Order Deadline\n\nAction Required: ${deadline.action}\n\nResponsible Party: ${deadline.responsible}\n\nNotes: ${deadline.notes || 'No additional notes'}\n\nCase: CHAN WING HONG v DELICIOUS KINGDOM CATERING SERVICE LIMITED\nCase Number: DCPI 2999/2024`;\n\n// T·∫°o datetime (ISO format)\nconst startDateTime = `${deadline.deadline}T09:00:00`;\nconst endDateTime = `${deadline.deadline}T10:00:00`;\n\n// Return d·ªØ li·ªáu cho Google Calendar\nreturn {\n  json: {\n    summary: eventTitle,\n    description: eventDescription,\n    startDateTime: startDateTime,\n    endDateTime: endDateTime,\n    action: deadline.action,\n    deadline: deadline.deadline,\n    responsible: deadline.responsible,\n    notes: deadline.notes\n  }\n};"
      },
      "id": "3bc9903d-df05-4f70-91bb-cdff9f2faeb4",
      "name": "Prepare Calendar Event Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1232, -64]
    },
    {
      "parameters": {
        "fieldToSplitOut": "deadlines",
        "options": {}
      },
      "id": "05ab61d3-bf83-4346-9940-9204bc3552b4",
      "name": "Split Into Individual Deadlines",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [1008, -64]
    },
    {
      "parameters": {
        "jsCode": "// Parse Ollama response and extract deadlines\nconst ollamaResponse = $input.item.json;\n\nfunction validateDeadline(d) {\n  if (!d || typeof d !== 'object') return false;\n  if (!d.action || !d.deadline || !d.responsible) return false;\n  if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(d.deadline)) return false;\n  return true;\n}\n\nlet extractedData = { deadlines: [] };\n\ntry {\n  const content = ollamaResponse.message?.content || ollamaResponse.content || '';\n  \n  if (!content) {\n    throw new Error('No content in Ollama response');\n  }\n  \n  let parsedData;\n  \n  try {\n    parsedData = JSON.parse(content);\n  } catch (directError) {\n    const patterns = [\n      /\\{[\\s\\S]*?\"deadlines\"[\\s\\S]*?\\}/,\n      /\\{[\\s\\S]*?\\}/\n    ];\n    \n    let found = false;\n    for (const pattern of patterns) {\n      const match = content.match(pattern);\n      if (match) {\n        try {\n          parsedData = JSON.parse(match[0]);\n          found = true;\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n    }\n    \n    if (!found) {\n      throw new Error('Could not extract valid JSON');\n    }\n  }\n  \n  if (Array.isArray(parsedData)) {\n    extractedData.deadlines = parsedData.filter(validateDeadline);\n  } else if (parsedData.deadlines && Array.isArray(parsedData.deadlines)) {\n    extractedData.deadlines = parsedData.deadlines.filter(validateDeadline);\n  } else if (validateDeadline(parsedData)) {\n    extractedData.deadlines = [parsedData];\n  }\n  \n} catch (error) {\n  console.error('Error in parsing:', error.message);\n  extractedData.deadlines = [{\n    action: \"Review court order manually\",\n    deadline: \"2025-12-31\",\n    responsible: \"Both\",\n    notes: \"Automatic extraction failed\"\n  }];\n}\n\nif (!extractedData.deadlines || extractedData.deadlines.length === 0) {\n  extractedData.deadlines = [{\n    action: \"Review court order manually\",\n    deadline: \"2025-12-31\",\n    responsible: \"Both\",\n    notes: \"No deadlines found\"\n  }];\n}\n\nconsole.log('Total deadlines extracted:', extractedData.deadlines.length);\n\nreturn { json: extractedData };"
      },
      "id": "c606a156-94ca-4bbe-bc32-38d34b380d6a",
      "name": "Parse Ollama Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [784, -64]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://106.104.117.24:8434/api/chat",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.requestBody }}",
        "options": {
          "timeout": 120000
        }
      },
      "id": "79aa177b-02c9-4b8e-9aca-147f6e5d42b7",
      "name": "Call Ollama API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [576, -64]
    },
    {
      "parameters": {
        "jsCode": "// Extract text from PDF\nconst extractedData = $input.item.json;\nconst binaryData = $input.item.binary;\n\nconst filename = binaryData?.images?.fileName || 'unknown.pdf';\nlet courtOrderText = '';\n\nif (extractedData.text && typeof extractedData.text === 'string') {\n  courtOrderText = extractedData.text.trim();\n} else if (extractedData.data && typeof extractedData.data === 'string') {\n  courtOrderText = extractedData.data.trim();\n}\n\nif (!courtOrderText || courtOrderText.length < 100) {\n  throw new Error('PDF appears to be scanned - needs OCR processing');\n}\n\nconst systemPrompt = \n  \"You are an expert legal document analyzer. \" +\n  \"Extract ALL deadlines from court orders. \" +\n  \"Respond with valid JSON only: {\\\"deadlines\\\": [{\\\"action\\\": \\\"...\\\", \\\"deadline\\\": \\\"YYYY-MM-DD\\\", \\\"responsible\\\": \\\"Plaintiff|Defendant|Both\\\", \\\"notes\\\": \\\"...\\\"}]}\";\n\nconst userPrompt = `Extract ALL deadlines from this court order.\n\nCONTEXT:\n- Order date: June 10, 2025\n- Look for: \"on or before\", \"by\", \"within X days\"\n- Calculate \"within X days\" from June 10, 2025\n\nFor EACH deadline:\n1. action: Detailed description\n2. deadline: YYYY-MM-DD format\n3. responsible: Plaintiff, Defendant, or Both\n4. notes: Additional context\n\n===== COURT ORDER =====\n${courtOrderText}\n===== END =====\n\nRespond with ONLY the JSON object.`;\n\nreturn {\n  json: {\n    requestBody: {\n      model: \"qwen3:32b\",\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt }\n      ],\n      stream: false,\n      format: \"json\",\n      options: { temperature: 0.1, num_predict: 3000 }\n    }\n  }\n};"
      },
      "id": "11ba9a00-ad02-4a3d-82fa-5d2dfe675246",
      "name": "Prepare Ollama Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [352, -64]
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "images",
        "options": {
          "joinPages": true
        }
      },
      "id": "73fa23b4-60c4-46ae-8fcc-c4126fd9c610",
      "name": "Extract PDF Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [128, -64]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "court-order-upload",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "b441a93f-f1e7-4c27-b5b8-b95c78a34b66",
      "name": "Webhook - Upload Court Order",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [-96, -64],
      "webhookId": "court-order-upload"
    }
  ],
  "pinData": {},
  "connections": {
    "Prepare Success Response": {
      "main": [
        [
          {
            "node": "Send Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate All Events": {
      "main": [
        [
          {
            "node": "Prepare Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Google Calendar Event": {
      "main": [
        [
          {
            "node": "Aggregate All Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Calendar Event Data": {
      "main": [
        [
          {
            "node": "Create Google Calendar Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Into Individual Deadlines": {
      "main": [
        [
          {
            "node": "Prepare Calendar Event Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Ollama Response": {
      "main": [
        [
          {
            "node": "Split Into Individual Deadlines",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Ollama API": {
      "main": [
        [
          {
            "node": "Parse Ollama Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Ollama Request": {
      "main": [
        [
          {
            "node": "Call Ollama API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Text": {
      "main": [
        [
          {
            "node": "Prepare Ollama Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook - Upload Court Order": {
      "main": [
        [
          {
            "node": "Extract PDF Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3bb77d52-cbef-46d5-9d7a-035cf7e205d4",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f83b1d41668dec6f3a660fd25c25fb86b7dff4403114aac1baef660638170bde"
  },
  "id": "AVCrYd33ePSipxTQ",
  "tags": []
}
